//
//  CreateMealPlanSheet.swift
//  GroceryRecipeManager
//
//  Created for M4.2: Calendar-Based Meal Planning Core
//  Sheet for creating a new meal plan with customizable start date and duration
//

import SwiftUI

// M4.2: Sheet for creating a meal plan with user-selected dates
// Allows customization of start date, duration, and optional custom name
struct CreateMealPlanSheet: View {
    
    // MARK: - Properties
    
    @Environment(\.dismiss) private var dismiss
    @StateObject private var mealPlanService = MealPlanService.shared
    @StateObject private var preferences = UserPreferencesService.shared
    
    // M4.2: User-selected plan parameters
    @State private var startDate: Date
    @State private var duration: Int
    @State private var customName: String = ""
    @State private var useAutoName: Bool = true
    
    // MARK: - Initialization
    
    init() {
        // Initialize with user preferences as defaults
        let prefs = UserPreferencesService.shared
        let calendar = Calendar.current
        
        // Calculate default start date based on user's preferred start day
        let today = Date()
        let todayWeekday = calendar.component(.weekday, from: today)
        let targetWeekday = prefs.mealPlanStartDay + 1 // Convert 0-based to 1-based
        
        var daysToAdd = targetWeekday - todayWeekday
        if daysToAdd <= 0 {
            daysToAdd += 7 // Move to next week if target day has passed
        }
        
        let defaultStartDate = calendar.date(byAdding: .day, value: daysToAdd, to: today) ?? today
        
        _startDate = State(initialValue: defaultStartDate)
        _duration = State(initialValue: prefs.mealPlanDuration)
        _useAutoName = State(initialValue: prefs.autoNameMealPlans)
    }
    
    // MARK: - Computed Properties
    
    // M4.2: Calculate end date based on start date and duration
    private var endDate: Date {
        Calendar.current.date(byAdding: .day, value: duration - 1, to: startDate) ?? startDate
    }
    
    // M4.2: Generate preview of auto-generated name
    private var autoGeneratedName: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MMM d"
        
        if duration == 7 {
            return "Week of \(formatter.string(from: startDate))"
        } else {
            return "\(formatter.string(from: startDate)) - \(formatter.string(from: endDate))"
        }
    }
    
    // MARK: - Body
    
    var body: some View {
        NavigationStack {
            Form {
                // Date Selection Section
                dateSection
                
                // Duration Section
                durationSection
                
                // Name Section
                nameSection
                
                // Preview Section
                previewSection
            }
            .navigationTitle("New Meal Plan")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .confirmationAction) {
                    Button("Create") {
                        createMealPlan()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
    }
    
    // MARK: - Sections
    
    // M4.2: Date selection with start date picker
    private var dateSection: some View {
        Section {
            DatePicker(
                "Start Date",
                selection: $startDate,
                displayedComponents: .date
            )
            .datePickerStyle(.compact)
            
            HStack {
                Text("End Date")
                    .foregroundColor(.secondary)
                Spacer()
                Text(endDate, style: .date)
                    .foregroundColor(.primary)
            }
        } header: {
            Text("Dates")
        } footer: {
            Text("Choose when your meal plan should begin")
        }
    }
    
    // M4.2: Duration selector with stepper
    private var durationSection: some View {
        Section {
            Stepper(
                "\(duration) days",
                value: $duration,
                in: 3...14
            )
            
            // Quick duration buttons
            HStack(spacing: 12) {
                ForEach([3, 5, 7, 10, 14], id: \.self) { days in
                    Button {
                        duration = days
                    } label: {
                        Text("\(days)d")
                            .font(.caption)
                            .fontWeight(duration == days ? .semibold : .regular)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 6)
                            .background(duration == days ? Color.blue : Color(.systemGray5))
                            .foregroundColor(duration == days ? .white : .primary)
                            .cornerRadius(8)
                    }
                }
            }
            .frame(maxWidth: .infinity)
        } header: {
            Text("Duration")
        } footer: {
            Text("How many days should this meal plan cover?")
        }
    }
    
    // M4.2: Name customization section
    private var nameSection: some View {
        Section {
            Toggle("Auto-generate name", isOn: $useAutoName)
            
            if !useAutoName {
                TextField("Meal plan name", text: $customName)
                    .textFieldStyle(.roundedBorder)
            }
            
            if useAutoName {
                HStack {
                    Text("Preview")
                        .foregroundColor(.secondary)
                    Spacer()
                    Text(autoGeneratedName)
                        .foregroundColor(.primary)
                        .fontWeight(.medium)
                }
            }
        } header: {
            Text("Name")
        } footer: {
            if useAutoName {
                Text("Name will be generated automatically from dates")
            } else {
                Text("Enter a custom name for this meal plan")
            }
        }
    }
    
    // M4.2: Preview summary of the meal plan
    private var previewSection: some View {
        Section {
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    Image(systemName: "calendar")
                        .foregroundColor(.blue)
                    Text(useAutoName ? autoGeneratedName : (customName.isEmpty ? "Unnamed Plan" : customName))
                        .fontWeight(.semibold)
                }
                
                Divider()
                
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Start")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text(startDate, style: .date)
                            .font(.subheadline)
                    }
                    
                    Spacer()
                    
                    Image(systemName: "arrow.right")
                        .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    VStack(alignment: .trailing, spacing: 4) {
                        Text("End")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text(endDate, style: .date)
                            .font(.subheadline)
                    }
                }
                
                Divider()
                
                HStack {
                    Image(systemName: "calendar.badge.clock")
                        .foregroundColor(.green)
                    Text("\(duration) days")
                        .font(.subheadline)
                }
            }
            .padding(.vertical, 8)
        } header: {
            Text("Summary")
        }
    }
    
    // MARK: - Actions
    
    // M4.2: Creates the meal plan with user-selected parameters
    private func createMealPlan() {
        let plan = mealPlanService.createMealPlan(startDate: startDate)
        
        if let plan = plan {
            // Update duration if different from default
            plan.duration = Int16(duration)
            
            // Update name if custom name provided
            if !useAutoName && !customName.isEmpty {
                plan.name = customName
            } else if useAutoName {
                plan.name = autoGeneratedName
            }
            
            // Save changes
            do {
                try PersistenceController.shared.container.viewContext.save()
                dismiss()
            } catch {
                print("Error saving meal plan: \(error)")
            }
        }
    }
}

// MARK: - Preview

#Preview {
    CreateMealPlanSheet()
}
